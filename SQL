-- Check for missing values and if all rows was upload for Customer and Seller tables
SELECT 
  SUM(CASE WHEN string_field_0 IS NULL THEN 1 ELSE 0 END) AS null_order_id,
  SUM(CASE WHEN string_field_1 IS NULL THEN 1 ELSE 0 END) AS null_user_id,
  COUNT(*) AS total_rows
FROM `projectecom-463011.E_com_u.customers`;

SELECT 
  SUM(CASE WHEN string_field_0 IS NULL THEN 1 ELSE 0 END) AS null_order_id,
  SUM(CASE WHEN string_field_1 IS NULL THEN 1 ELSE 0 END) AS null_user_id,
  COUNT(*) AS total_rows
FROM`projectecom-463011.E_com_u.sellers`;
-- Check that the order date is no later than the delivery date AND same with returns
SELECT *
FROM `projectecom-463011.E_com_u.orders`
WHERE order_purchase_timestamp > order_delivered_timestamp

SELECT return_id
FROM `projectecom-463011.E_com_u.returns`
WHERE return_requested_date > return_processed_date;
--Explore Orders table
SELECT
MIN(order_purchase_timestamp) AS first_order_date,
MAX(order_purchase_timestamp) AS last_order_date
FROM `projectecom-463011.E_com_u.orders`

--Is there days without orders
WITH all_dates AS (
  SELECT 
    DATE_ADD(DATE '2024-01-01', INTERVAL day_offset DAY) AS date
  FROM UNNEST(GENERATE_ARRAY(0, DATE_DIFF(DATE '2025-01-01', DATE '2024-01-01', DAY))) AS day_offset
),

order_dates AS (
  SELECT DISTINCT DATE(order_purchase_timestamp) AS date
  FROM `projectecom-463011.E_com_u.orders`
)

SELECT 
  all_dates.date
FROM all_dates
LEFT JOIN order_dates ON all_dates.date = order_dates.date
WHERE order_dates.date IS NULL
ORDER BY all_dates.date;

--Number of orders by status
SELECT order_status, count(order_id),
ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS order_percentage 
FROM `projectecom-463011.E_com_u.orders` 
Group by order_status

-- Payment type
SELECT payment_type, 
COUNT(*) AS count_payments, 
ROUND(SUM(payment_value), 2) AS total_paid
FROM `projectecom-463011.E_com_u.orders` 
GROUP BY payment_type

--Total_revenue
SELECT ROUND(SUM(payment_value),2) AS total_revenue
FROM `projectecom-463011.E_com_u.orders` 
WHERE order_status = 'delivered'

--Average check
SELECT ROUND(AVG(payment_value),2) AS avg_payment
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status = 'delivered'

--Average, min and max delivery time
SELECT 
  ROUND(AVG(TIMESTAMP_DIFF(order_delivered_timestamp, order_purchase_timestamp, HOUR)) / 24, 2) AS avg_delivery_days,
  ROUND(MIN(TIMESTAMP_DIFF(order_delivered_timestamp, order_purchase_timestamp, HOUR)) / 24, 2) AS min_delivery_days,
  ROUND(MAX(TIMESTAMP_DIFF(order_delivered_timestamp, order_purchase_timestamp, HOUR)) / 24, 2) AS max_delivery_days
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status = 'delivered'

--Explore Product table

--product category
SELECT string_field_2 AS product_category, 
COUNT(*) AS total_products
FROM `projectecom-463011.E_com_u.products`
GROUP BY product_category
ORDER BY total_products DESC

--Average, minimum, maximum price level in each category
SELECT 
  string_field_2 AS 
  product_category,
  ROUND(MIN(price), 2) AS min_price,
  ROUND(AVG(price), 2) AS avg_price,
  ROUND(MAX(price), 2) AS max_price
FROM `projectecom-463011.E_com_u.products` p
JOIN `projectecom-463011.E_com_u.order_items` i
ON p.string_field_0=i.product_id
GROUP BY product_category

--Explore Returns table

--Type of reasons
SELECT return_reason, count(return_id),
ROUND(COUNT(*) * 100.0 / SUM(COUNT(*)) OVER (), 2) AS return_pers
FROM `projectecom-463011.E_com_u.returns` 
GROUP BY return_reason

--Explore Sellers table
-- Explore sellers and their location
SELECT  string_field_1 AS location, 
count(*) AS count_sellers
FROM `projectecom-463011.E_com_u.sellers` 
GROUP BY string_field_1

--Sales analysis

--Delevered orders

--Total sales by month
SELECT 
  FORMAT_DATE('%Y-%m', DATE(order_purchase_timestamp)) AS month,
  ROUND(SUM(payment_value),2) AS income,
  COUNT(order_id) AS num_orders
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status ='delivered'
GROUP BY month
ORDER BY month

--Sales by category
SELECT 
  p.string_field_2 AS product_category,
  ROUND(SUM(payment_value),2) AS income,
  COUNT(o.order_id) AS num_orders
FROM `projectecom-463011.E_com_u.orders` AS o
JOIN `projectecom-463011.E_com_u.order_items` AS i
  ON o.order_id = i.order_id
  JOIN `projectecom-463011.E_com_u.products` AS p
    ON i.product_id = p.string_field_0
WHERE order_status ='delivered'
GROUP BY product_category
ORDER BY income

-- Find a months where sales drop 

WITH monthly_sales AS (SELECT 
  FORMAT_DATE('%Y-%m', DATE(order_purchase_timestamp)) AS month,
  ROUND(SUM(payment_value),2) AS income,
  COUNT(order_id) AS num_orders
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status ='delivered'
GROUP BY month
)

SELECT  month,
  income,
  LAG(income) OVER(ORDER BY month) AS previous_month_income,
  ROUND((income - LAG(income) OVER (ORDER BY month)) / LAG(income) OVER (ORDER BY month) * 100, 2) AS income_change
FROM monthly_sales
ORDER BY month


--Change in monthly income compared to the average for the year
WITH monthly_sales AS (
  SELECT 
    FORMAT_DATE('%Y-%m', DATE(order_purchase_timestamp)) AS month,
    ROUND(SUM(payment_value), 2) AS income
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
  GROUP BY month
),

average_income AS (
  SELECT 
    ROUND(AVG(income), 2) AS yearly_avg_income
  FROM monthly_sales
)

SELECT 
  ms.month,
  ms.income,
  ai.yearly_avg_income,
  ROUND((ms.income - ai.yearly_avg_income) / ai.yearly_avg_income * 100, 2) AS income_change_vs_avg
FROM monthly_sales ms
CROSS JOIN average_income ai
ORDER BY ms.month;

--Decrease or increase in total_income for each category compared to the average for the same category
--By month
WITH monthly_category_sales AS (
  SELECT 
    FORMAT_DATE('%Y-%m', DATE(o.order_purchase_timestamp)) AS month,
    string_field_2 AS product_category,
    ROUND(SUM(payment_value), 2) AS total_income,
    COUNT(o.order_id) AS total_orders,
    
  FROM `projectecom-463011.E_com_u.orders` o
  JOIN `projectecom-463011.E_com_u.order_items` i ON o.order_id = i.order_id
  JOIN`projectecom-463011.E_com_u.products` p
  ON p.string_field_0=i.product_id
  WHERE o.order_status = 'delivered'
  GROUP BY month, product_category 
),

category_avg_income AS (
  SELECT 
    product_category,
    ROUND(AVG(total_income), 2) AS avg_income
  FROM monthly_category_sales
  GROUP BY product_category
)

SELECT 
  mcs.month,
  mcs.product_category,
  mcs.total_income,
  cavg.avg_income,
  ROUND((mcs.total_income - cavg.avg_income) / cavg.avg_income * 100, 2) AS change_vs_avg_pct
FROM monthly_category_sales mcs
JOIN category_avg_income cavg
  ON mcs.product_category = cavg.product_category
ORDER BY mcs.product_category, mcs.month;

--Canceled Orders


SELECT payment_type, 
COUNT(*) AS count_payments, 
ROUND(SUM(payment_value), 2) AS total_paid
FROM `projectecom-463011.E_com_u.orders` 
WHERE order_status ='canceled'
GROUP BY payment_type

--Product categories with the most canceled orders
SELECT 
  p.string_field_2 AS product_category,
  COUNT(*) AS canceled_orders
FROM `projectecom-463011.E_com_u.orders` o
JOIN `projectecom-463011.E_com_u.order_items` i ON o.order_id = i.order_id
JOIN `projectecom-463011.E_com_u.products` p ON i.product_id = p.string_field_0
WHERE o.order_status = 'canceled'
GROUP BY product_category
ORDER BY canceled_orders DESC
LIMIT 10

--Sellers with the most canceled orders
SELECT 
  s.string_field_0 AS seller_id,
  COUNT(*) AS canceled_orders
FROM `projectecom-463011.E_com_u.orders` o
JOIN `projectecom-463011.E_com_u.order_items` i ON o.order_id = i.order_id
JOIN `projectecom-463011.E_com_u.sellers` s ON i.seller_id= s.string_field_0
WHERE o.order_status = 'canceled'
GROUP BY seller_id
ORDER BY canceled_orders DESC

--Return orders

--Percentage of orders returned among delivered

WITH delivered_orders AS (
  SELECT order_id
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
),

returned_orders AS (
  SELECT DISTINCT order_id
  FROM `projectecom-463011.E_com_u.returns`
)

SELECT 
  COUNT(DISTINCT d.order_id) AS delivered_orders,
  COUNT(DISTINCT r.order_id) AS returned_orders,
  ROUND(COUNT(DISTINCT r.order_id) * 100.0 / COUNT(DISTINCT d.order_id), 2) AS return_rate_pct
FROM delivered_orders d
LEFT JOIN returned_orders r ON d.order_id = r.order_id;


--Percentage of returns among delivered orders by month and product category
WITH delivered_orders AS (
  SELECT 
    o.order_id,
    DATE(o.order_purchase_timestamp) AS order_date,
    FORMAT_DATE('%Y-%m', DATE(o.order_purchase_timestamp)) AS month,
    i.product_id
  FROM `projectecom-463011.E_com_u.orders` o
  JOIN `projectecom-463011.E_com_u.order_items` i ON o.order_id = i.order_id
  WHERE o.order_status = 'delivered'
),

returns AS (
  SELECT DISTINCT order_id
  FROM `projectecom-463011.E_com_u.returns`
),

products_with_category AS (
  SELECT 
    string_field_0 AS product_id,
    string_field_2 AS product_category
  FROM `projectecom-463011.E_com_u.products`
),

merged AS (
  SELECT 
    d.month,
    p.product_category,
    d.order_id,
    IF(r.order_id IS NOT NULL, 1, 0) AS is_returned
  FROM delivered_orders d
  JOIN products_with_category p ON d.product_id = p.product_id
  LEFT JOIN returns r ON d.order_id = r.order_id
)

SELECT 
  month,
  product_category,
  COUNT(DISTINCT order_id) AS total_delivered,
  SUM(is_returned) AS total_returns,
  ROUND(SUM(is_returned) * 100.0 / COUNT(DISTINCT order_id), 2) AS return_rate_pct
FROM merged
GROUP BY month, product_category
ORDER BY month, return_rate_pct DESC;

--Return Rate by Sellers

WITH delivered_orders AS (
  SELECT 
    o.order_id,
    i.seller_id
  FROM `projectecom-463011.E_com_u.orders` o
  JOIN `projectecom-463011.E_com_u.order_items` i 
    ON o.order_id = i.order_id
  WHERE o.order_status = 'delivered'
),

returns AS (
  SELECT DISTINCT order_id
  FROM `projectecom-463011.E_com_u.returns`
),

merged AS (
  SELECT 
    d.seller_id,
    d.order_id,
    IF(r.order_id IS NOT NULL, 1, 0) AS is_returned
  FROM delivered_orders d
  LEFT JOIN returns r ON d.order_id = r.order_id
)

SELECT 
  seller_id,
  COUNT(DISTINCT order_id) AS total_delivered_orders,
  SUM(is_returned) AS returned_orders,
  ROUND(SUM(is_returned) * 100.0 / COUNT(DISTINCT order_id), 2) AS return_rate_pct
FROM merged
GROUP BY seller_id
ORDER BY return_rate_pct DESC
LIMIT 10;



--Metrics

--LTV
WITH first_orders AS (
  SELECT
    user_id,
    MIN(DATE(order_purchase_timestamp)) AS cohort_date
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
  GROUP BY user_id
),
orders_with_cohort AS (
  SELECT
    o.user_id,
    o.order_id,
    DATE(o.order_purchase_timestamp) AS order_date,
    f.cohort_date,
    DATE_DIFF(DATE(o.order_purchase_timestamp), f.cohort_date, MONTH) AS cohort_month,
    o.payment_value
  FROM `projectecom-463011.E_com_u.orders` o
  JOIN first_orders f ON o.user_id = f.user_id
  WHERE o.order_status = 'delivered'
),
cohort_ltv AS (
  SELECT
    FORMAT_DATE('%Y-%m', cohort_date) AS cohort,
    cohort_month,
    ROUND(SUM(payment_value), 2) AS total_revenue,
    COUNT(DISTINCT user_id) AS num_users,
    ROUND(SUM(payment_value) / COUNT(DISTINCT user_id), 2) AS ltv
  FROM orders_with_cohort
  GROUP BY cohort, cohort_month
  ORDER BY cohort, cohort_month
)

SELECT *
FROM cohort_ltv;


--Retention 
WITH first_orders AS (
  SELECT user_id, MIN(DATE(order_purchase_timestamp)) AS first_purchase
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
  GROUP BY user_id
),
returning_orders AS (
  SELECT user_id, DATE(order_purchase_timestamp) AS order_date
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
)

SELECT 
  FORMAT_DATE('%Y-%m', f.first_purchase) AS cohort_month,
  FORMAT_DATE('%Y-%m', r.order_date) AS order_month,
  COUNT(DISTINCT r.user_id) AS returning_users
FROM first_orders f
JOIN returning_orders r ON f.user_id = r.user_id
GROUP BY cohort_month, order_month
ORDER BY cohort_month, order_month;

--Average Order Value
SELECT
  ROUND(SUM(payment_value) / COUNT(DISTINCT order_id), 2) AS avg_order_value
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status = 'delivered';

--Purchase Frequency
SELECT
  COUNT(order_id) / COUNT(DISTINCT user_id) AS purchase_frequency
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status = 'delivered';

--Average Revenue Per User
SELECT
  ROUND(SUM(payment_value) / COUNT(DISTINCT user_id), 2) AS arpu
FROM `projectecom-463011.E_com_u.orders`
WHERE order_status = 'delivered';

--Retention Rate

WITH first_orders AS (
  SELECT 
    user_id, 
    MIN(DATE(order_purchase_timestamp)) AS first_purchase
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
  GROUP BY user_id
),

returning_orders AS (
  SELECT 
    user_id, 
    DATE(order_purchase_timestamp) AS order_date
  FROM `projectecom-463011.E_com_u.orders`
  WHERE order_status = 'delivered'
),

cohorts AS (
  SELECT 
    f.user_id,
    f.first_purchase,
    r.order_date,
    FORMAT_DATE('%Y-%m', f.first_purchase) AS cohort_month,
    FORMAT_DATE('%Y-%m', r.order_date) AS order_month
  FROM first_orders f
  JOIN returning_orders r ON f.user_id = r.user_id
),

returning_counts AS (
  SELECT 
    cohort_month,
    order_month,
    COUNT(DISTINCT user_id) AS returning_users
  FROM cohorts
  GROUP BY cohort_month, order_month
),

initial_users AS (
  SELECT 
    FORMAT_DATE('%Y-%m', first_purchase) AS cohort_month,
    COUNT(DISTINCT user_id) AS initial_users
  FROM first_orders
  GROUP BY cohort_month
)

SELECT 
  rc.cohort_month,
  rc.order_month,
  rc.returning_users,
  iu.initial_users,
  ROUND(rc.returning_users * 100.0 / iu.initial_users, 2) AS retention_rate_pct
FROM returning_counts rc
JOIN initial_users iu USING (cohort_month)
ORDER BY rc.cohort_month, rc.order_month;

